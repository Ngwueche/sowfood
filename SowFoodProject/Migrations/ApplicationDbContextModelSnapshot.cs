// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SowFoodProject.Data;

#nullable disable

namespace SowFoodProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PasswordResetVerified")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SowFoodCompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.RolePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompany", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("SowFoodCompanies");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyCustomer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RegisteredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SowFoodCompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SowFoodCompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("SowFoodCompanyCustomers");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyProductionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfProduction")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SowFoodCompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("SowFoodCompanyId");

                    b.ToTable("SowFoodCompanyProductionItems");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanySalesRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SowFoodCompanyCustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SowFoodCompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SowFoodCompanyProductItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SowFoodCompanyShelfItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SowFoodCompanyStaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SowFoodCompanyCustomerId");

                    b.HasIndex("SowFoodCompanyId");

                    b.HasIndex("SowFoodCompanyProductItemId");

                    b.HasIndex("SowFoodCompanyShelfItemId");

                    b.HasIndex("SowFoodCompanyStaffId");

                    b.ToTable("SowFoodCompanySalesRecords");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyShelfItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SowFoodCompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("SowFoodCompanyId");

                    b.ToTable("SowFoodCompanyShelfItems");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SowFoodCompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SowFoodCompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("SowFoodCompanyStaff");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaffAppraiser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SowFoodCompanyStaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SowFoodCompanyStaffId");

                    b.HasIndex("UserId");

                    b.ToTable("SowFoodCompanyStaffAppraisers");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaffAttendance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConfirmedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ConfirmedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LogonTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SowFoodCompanyStaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmedByUserId");

                    b.HasIndex("SowFoodCompanyStaffId");

                    b.ToTable("SowFoodCompanyStaffAttendances");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SowFoodProject.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.RolePermission", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.ApplicationRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompany", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.ApplicationUser", "User")
                        .WithOne("SowFoodCompany")
                        .HasForeignKey("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompany", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyCustomer", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompany", "SowFoodCompany")
                        .WithMany("Customers")
                        .HasForeignKey("SowFoodCompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SowFoodProject.Models.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SowFoodCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyProductionItem", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaff", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompany", "SowFoodCompany")
                        .WithMany("SowFoodProducts")
                        .HasForeignKey("SowFoodCompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("SowFoodCompany");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanySalesRecord", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyCustomer", "SowFoodCompanyCustomer")
                        .WithMany("SowFoodCompanySalesRecords")
                        .HasForeignKey("SowFoodCompanyCustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompany", "SowFoodCompany")
                        .WithMany("SowFoodSalesRecords")
                        .HasForeignKey("SowFoodCompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyProductionItem", "SowFoodCompanyProductItem")
                        .WithMany()
                        .HasForeignKey("SowFoodCompanyProductItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyShelfItem", "SowFoodCompanyShelfItem")
                        .WithMany()
                        .HasForeignKey("SowFoodCompanyShelfItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaff", "SowFoodCompanyStaff")
                        .WithMany("SowFoodCompanySalesRecords")
                        .HasForeignKey("SowFoodCompanyStaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SowFoodCompany");

                    b.Navigation("SowFoodCompanyCustomer");

                    b.Navigation("SowFoodCompanyProductItem");

                    b.Navigation("SowFoodCompanyShelfItem");

                    b.Navigation("SowFoodCompanyStaff");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyShelfItem", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaff", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompany", "SowFoodCompany")
                        .WithMany("SowFoodShelfItems")
                        .HasForeignKey("SowFoodCompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("SowFoodCompany");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaff", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompany", "SowFoodCompany")
                        .WithMany("Staff")
                        .HasForeignKey("SowFoodCompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SowFoodProject.Models.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SowFoodCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaffAppraiser", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaff", "SowFoodCompanyStaff")
                        .WithMany()
                        .HasForeignKey("SowFoodCompanyStaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SowFoodProject.Models.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SowFoodCompanyStaff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaffAttendance", b =>
                {
                    b.HasOne("SowFoodProject.Models.Entities.ApplicationUser", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaff", "SowFoodCompanyStaff")
                        .WithMany("SowFoodCompanyStaffAttendances")
                        .HasForeignKey("SowFoodCompanyStaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("SowFoodCompanyStaff");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.ApplicationRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("SowFoodCompany")
                        .IsRequired();
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompany", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("SowFoodProducts");

                    b.Navigation("SowFoodSalesRecords");

                    b.Navigation("SowFoodShelfItems");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyCustomer", b =>
                {
                    b.Navigation("SowFoodCompanySalesRecords");
                });

            modelBuilder.Entity("SowFoodProject.Models.Entities.SowFoodLinkUp.SowFoodCompanyStaff", b =>
                {
                    b.Navigation("SowFoodCompanySalesRecords");

                    b.Navigation("SowFoodCompanyStaffAttendances");
                });
#pragma warning restore 612, 618
        }
    }
}
